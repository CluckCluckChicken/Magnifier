@using Magnifier.Models
@using System.Net
@using System.Text.RegularExpressions;
@inject Blazored.LocalStorage.ISyncLocalStorageService LocalStorage
@inject HttpClient Http
@inject IJSRuntime JsRuntime;
@inject NavigationManager NavigationManager

<style>
    #comments-@commentId .showOnCommentHover {
        visibility: hidden;
    }

    #comments-@commentId:hover .showOnCommentHover {
        visibility: visible;
    }
</style>

@if (isTopLevel)
{
    <div id="comments-@commentId" class="flex flex-row w-1/2">
        <a href="https://magnifier.potatophant.net/users/@username" target="_blank" rel="noopener noreferrer" class="mr-2">
            <img src="@icon" class="float-left rounded" style="width: 60px; height: 60px;" />
        </a>
        <div class="flex flex-col w-full mb-6" style="max-width: calc(100% - 60px - 4px);">
            <a href="https://magnifier.potatophant.net/users/@username" target="_blank" rel="noopener noreferrer" class="font-bold text-blue mb-2">@username</a>
            <div class="bg-white rounded-lg break-words w-full p-3">
                <div>
                    @parsedContent
                </div>
                <div class="text-grey text-xs mt-4">
                    @timeAgo
                </div>
            </div>
            <div id="bottom-row" class="flex flex-row items-center mt-1">
                <ReactMenu projectId="@projectId" commentId="@commentId" comment="@comment" />
                <div class="flex-grow" />
                <div id="right-buttons" class="flex flex-row showOnCommentHover">
                    <CommentButton onClick="@Star" bigger>
                        @if (starred)
                        {
                            <span>★</span>
                        }
                        else
                        {
                            <span>☆</span>
                        }
                    </CommentButton>
                    <CommentButton onClick="@ViewOnScratch">View on Scratch</CommentButton>
                    <CommentButton onClick="@CopyLink">Copy Link</CommentButton>
                    <CommentButton onClick="@CopyId">Copy ID</CommentButton>
                </div>
            </div>
        </div>
    </div>

    @if (replys != null)
    {
        foreach (Magnifier.Models.Comment reply in replys)
        {
            if (reply != null)
            {
                if (reply.isReply)
                {
                    <Comment location="@location" projectId="@projectId" commentId="@reply.commentId.ToString()" comment="@reply" icon="@reply.comment.author.image" username="@reply.comment.author.username" content="@reply.comment.content" dateCreated="@reply.comment.datetime_created" isTopLevel="false" replys="@emptyReplyList" />
                }
            }
        }
    }
}
else
{
    <div id="comments-@commentId" class="flex flex-row ml-16" style="width: calc(50% - 4rem);">
        <a href="https://magnifier.potatophant.net/users/@username" target="_blank" rel="noopener noreferrer" class="mr-2">
            <img src="@icon" class="float-left rounded" style="width: 60px; height: 60px;" />
        </a>
        <div class="flex flex-col w-full mb-6" style="max-width: calc(100% - 60px - 4px);">
            <a href="https://magnifier.potatophant.net/users/@username" target="_blank" rel="noopener noreferrer" class="font-bold text-blue mb-2">@username</a>
            <div class="bg-white rounded-lg break-words w-full p-3">
                <div>
                    @parsedContent
                </div>
                <div class="text-grey text-xs mt-4">
                    @timeAgo
                </div>
            </div>
            <div id="bottom-row" class="flex flex-row items-center mt-1">
                <ReactMenu projectId="@projectId" commentId="@commentId" comment="@comment" />
                <div class="flex-grow" />
                <div id="right-buttons" class="flex flex-row showOnCommentHover">
                    <CommentButton onClick="@Star" bigger>
                        @if (starred)
                        {
                            <span>★</span>
                        }
                        else
                        {
                            <span>☆</span>
                        }
                    </CommentButton>
                    <CommentButton onClick="@ViewOnScratch">View on Scratch</CommentButton>
                    <CommentButton onClick="@CopyLink">Copy Link</CommentButton>
                    <CommentButton onClick="@CopyId">Copy ID</CommentButton>
                </div>
            </div>
        </div>
    </div>
}

@code {
    public enum CommentLocation
    {
        project,
        profile,
        studio
    }

    private bool hasInitialised = false;

    [Parameter]
    public string location { get; set; }

    [Parameter]
    public string projectId { get; set; }

    [Parameter]
    public string commentId { get; set; }

    [Parameter]
    public Magnifier.Models.Comment comment { get; set; }

    [Parameter]
    public string icon { get; set; }

    [Parameter]
    public string username { get; set; }

    [Parameter]
    public string content { get; set; }

    [Parameter]
    public DateTime? dateCreated { get; set; }

    [Parameter]
    public bool isTopLevel { get; set; } = true;

    [Parameter]
    public List<Magnifier.Models.Comment> replys { get; set; } // the compiler was bullying me for some reason so i had to change this to "replys" instead of "replies"

    [Parameter]
    public bool starred { get; set; }

    private MarkupString parsedContent;

    private string timeAgo;

    private readonly List<Magnifier.Models.Comment> emptyReplyList = new List<Magnifier.Models.Comment>();

    protected override void OnInitialized()
    {
        TimeSpan ts = DateTime.Now.Subtract(dateCreated ?? DateTime.MinValue);

        if (ts.TotalMinutes < 2)
            timeAgo = "1 minute ago";
        else if (ts.TotalHours < 1)
            timeAgo = $"{(int)ts.TotalMinutes} minutes ago";
        else if (ts.TotalHours < 2)
            timeAgo = "1 hour ago";
        else if (ts.TotalDays < 1)
            timeAgo = $"{(int)ts.TotalHours} hours ago";
        else if (ts.TotalDays < 2)
            timeAgo = "Yesterday";
        else if (ts.TotalDays < 7)
            timeAgo = $"On {(dateCreated ?? DateTime.MinValue).DayOfWeek}";
        else if (ts.TotalDays < 30)
            timeAgo = $"{(int)ts.TotalDays} days ago";
        else if (ts.TotalDays >= 30)
            if ((int)ts.TotalDays < 60)
                timeAgo = $"1 month ago";
            else
                timeAgo = $"{(int)ts.TotalDays / 30} months ago";
        else if (ts.TotalDays > 365)
            if ((int)ts.TotalDays == 1)
                timeAgo = $"1 year ago";
            else
                timeAgo = $"{(int)ts.TotalDays / 365} years ago";
        else if (ts.TotalDays > 365000) // 1 millenium
            timeAgo = $"oh wow magnifiers old. is hytale out yet?";

        Regex exp = new Regex(@"(?<=(^|[\s.,!])(?!\S*[:#]))[@|＠][A-Za-z0-9_-]{1,20}(?=(?:\b(?!@|＠)|$))");

        parsedContent = new MarkupString(exp.Replace(content, mention => $"<a href=\"users/{mention.Value.Substring(1)}\" onclick=\"window.location.href = 'users/{mention.Value.Substring(1)}'\" class=\"font-bold text-blue mb-2\">{mention.Value}</a>"));

        foreach (Magnifier.Models.Comment reply in replys)
        {
            reply.comment.content = WebUtility.HtmlDecode(reply.comment.content);
        }

        hasInitialised = true;
    }

    public void Star()
    {
        starred ^= true;

        /*HttpRequestMessage request = new HttpRequestMessage(HttpMethod.Put, $"https://magnifier-api.potatophant.net/api/Comments/{commentId}/reactions?reaction={reaction}");
        request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", LocalStorage.GetItem<string>("token"));
        await Http.SendAsync(request);*/
    }

    public void ViewOnScratch()
    {
        if (location == "studios")
        {
            NavigationManager.NavigateTo($"https://scratch.mit.edu/{location}/{projectId}/comments/#comments-{commentId}");
        }
        else
        {
            NavigationManager.NavigateTo($"https://scratch.mit.edu/{location}/{projectId}/#comments-{commentId}");
        }
    }

    public async Task CopyLink()
    {
        if (location == "studios")
        {
            await JsRuntime.InvokeVoidAsync("navigator.clipboard.writeText", $"https://scratch.mit.edu/{location}/{projectId}/comments/#comments-{commentId}");
        }
        else
        {
            await JsRuntime.InvokeVoidAsync("navigator.clipboard.writeText", $"https://scratch.mit.edu/{location}/{projectId}/#comments-{commentId}");
        }
    }

    public async Task CopyId()
    {
        await JsRuntime.InvokeVoidAsync("navigator.clipboard.writeText", commentId);
    }
}
