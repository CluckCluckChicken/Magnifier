@using Magnifier.Models
@using Services
@inject AuthenticationService AuthenticationService
@inject Blazored.LocalStorage.ISyncLocalStorageService LocalStorage
@inject HttpClient Http
@inject IJSRuntime JsRuntime;

@if (hasInitialised)
{
    if (hasReacted)
    {
        <button @onclick="(e => React(reaction.name))" class="bg-primary hover:bg-primaryHover active:outline-none focus:outline-none rounded-md p-1 mr-1 mt-1"><span>@reaction.emoji</span> <span>@count</span></button>
    }
    else
    {
        <button @onclick="(e => React(reaction.name))" class="hover:bg-white active:outline-none focus:outline-none rounded-md p-1 mr-1 mt-1"><span>@reaction.emoji</span> <span>@count</span></button>
    }
}

@code {
    private bool hasInitialised = false;

    [Parameter]
    public string commentId { get; set; }

    [Parameter]
    public List<Magnifier.Models.UserReaction> reactions { get; set; }

    [Parameter]
    public Reaction reaction { get; set; }

    public int count { get; private set; }

    public bool hasReacted { get; private set; }

    protected override async Task OnInitializedAsync()
    {
        AuthenticationService.Initialize();

        await GetReactions();

        hasInitialised = true;
    }

    private async Task GetReactions(bool fetch = false)
    {
        if (fetch)
        {
            reactions = await Http.GetFromJsonAsync<List<Magnifier.Models.UserReaction>>($"https://api.magnifier.potatophant.net/api/Comments/{commentId}/reactions");
        }

        count = 0;

        if (reactions != null && reactions.Count != 0)
        {
            foreach (UserReaction reaction in reactions)
            {
                if (reaction.reaction == this.reaction.name)
                {
                    count++;
                }

                if (AuthenticationService.user != null)
                {
                    if (reaction.user == AuthenticationService.user.username && reaction.reaction == this.reaction.name)
                    {
                        hasReacted = true;
                    }
                }
            }
        }
        else
        {
            hasReacted = false;
        }
    }

    private async Task React(string reaction)
    {
        if (AuthenticationService.user == null)
        {
            await JsRuntime.InvokeVoidAsync("alert", "You need to sign in before you can react.");
        }
        else
        {
            count += hasReacted ? -1 : 1;
            hasReacted = !hasReacted;

            HttpRequestMessage request = new HttpRequestMessage(HttpMethod.Put, $"https://api.magnifier.potatophant.net/api/Comments/{commentId}/reactions?reaction={reaction}");
            request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", LocalStorage.GetItem<string>("token"));
            await Http.SendAsync(request);

            await GetReactions(true);
        }
    }
}
