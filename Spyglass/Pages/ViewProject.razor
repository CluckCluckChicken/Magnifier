@page "/projects"
@page "/projects/{projectId}"
@using Magnifier.Models
@using Services
@using System.Net
@using System.Net.Http
@inject HttpClient Http
@inject ReactionService ReactionService

@if (string.IsNullOrEmpty(projectId))
{
    <p>you fool you did not include a project id</p>
}
else
{
    if (hasInitialised)
    {
        <PageTitle Title="on Magnifier" />

        <div class="flex flex-col justify-center items-center">
            <iframe src="https://scratch.mit.edu/projects/@projectId/embed" allowtransparency="true" width="485" height="402" frameborder="0" scrolling="no" allowfullscreen></iframe>
        </div>

        <div class="flex flex-col justify-center items-center mt-8">
            <Heading size="2">Comments</Heading>

            @foreach (Magnifier.Models.Comment comment in comments)
            {
                if (!comment.isReply)
                {
                    <Comment location="projects" projectId="@projectId" commentId="@comment.commentId.ToString()" comment="@comment" icon="@comment.comment.author.image" username="@comment.comment.author.username" content="@comment.comment.content" dateCreated="@comment.comment.datetime_created" replys="@comment.replies" />
                }
            }

            @if (loadingMore)
            {
                <!--<button class="transition duration-300 bg-primary hover:bg-primary active:outline-none focus:outline-none text-black font-dosis text-4xl rounded-2xl p-3">Loading...</button>-->
                <Loading />
            }
            else
            {
                <Button onClick="@LoadMore">Load More</Button>
            }
        </div>

        <footer>
            <Footer />
        </footer>
    }
    else
    {
        <Loading />
    }
}

@code {
    private bool hasInitialised = false;

    [Parameter]
    public string projectId { get; set; }

    public List<Magnifier.Models.Comment> comments { get; set; }

    private int page = 1;

    private bool loadingMore = false;

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(projectId))
        {
            await ReactionService.Initialize();

            comments = await Http.GetFromJsonAsync<List<Magnifier.Models.Comment>>($"https://api.magnifier.potatophant.net/api/Comments/projects/{projectId}/1");

            foreach (Magnifier.Models.Comment comment in comments)
            {
                comment.comment.content = WebUtility.HtmlDecode(comment.comment.content);

                List<Magnifier.Models.Comment> replies = new List<Magnifier.Models.Comment>();

                foreach (Magnifier.Models.Comment reply in comment.replies)
                {
                    replies.Add(comments.Find(comment => comment.commentId == reply.commentId));
                }

                comment.replies = replies;
            }
        }

        hasInitialised = true;
    }

    private async Task LoadMore()
    {
        loadingMore = true;

        page++;

        comments = comments.Concat(await Http.GetFromJsonAsync<List<Magnifier.Models.Comment>>($"https://api.magnifier.potatophant.net/api/Comments/projects/{projectId}/{page}")).ToList();

        foreach (Magnifier.Models.Comment comment in comments)
        {
            comment.comment.content = WebUtility.HtmlDecode(comment.comment.content);

            List<Magnifier.Models.Comment> replies = new List<Magnifier.Models.Comment>();

            foreach (Magnifier.Models.Comment reply in comment.replies)
            {
                replies.Add(comments.Find(comment => comment.commentId == reply.commentId));
            }

            comment.replies = replies;
        }

        loadingMore = false;
    }
}