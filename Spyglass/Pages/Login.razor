@page "/login"
@using Models
@using Services
@inject Blazored.LocalStorage.ISyncLocalStorageService LocalStorage
@inject AuthenticationService AuthenticationService
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<PageTitle Title="Magnifier" />

<div class="px-4">
    <Heading size="2">Log in to Magnifier</Heading>
    <Heading size="3">Your auth code is:</Heading>
    <div>@authCode</div>
    <Heading size="3">Comment the code in the authentication Scratch project, then press "Done".</Heading>
    <Button onClick="@ShowAuthProject">Show Project</Button>
    <Button onClick="@CompleteAuth">Done</Button>
    @if (failed)
    {
        <Heading size="3"><span class="text-red">Auth failed. Make sure that your comment contains just the code and nothing else.</span></Heading>
    }
</div>

@code {
    private string authCode { get; set; }

    private bool failed { get; set; }

    protected override async Task OnInitializedAsync()
    {
        authCode = await Http.GetStringAsync($"https://localhost:5001/api/Auth/code");
    }

    private async Task ShowAuthProject()
    {
        await JSRuntime.InvokeVoidAsync("window.open", "https://scratch.mit.edu/projects/534514916/", "authProject", "width=512,height=402");
    }

    private async Task CompleteAuth()
    {
        AuthenticationResponse response = await AuthenticationService.Login(authCode);

        if (response.response.IsSuccessStatusCode)
        {
            var blacklist = new List<string>{"46009361", "Scunthorpe", "mouse-pointer"};
            foreach (string item in blacklist) {
                if (AuthenticationService.user.username == item)
                {
                    AuthenticationService.Logout();
                    await JSRuntime.InvokeVoidAsync("alert", "go away");
                }
            }

            NavigationManager.NavigateTo("/");
        }

        failed = true;
    }
}
